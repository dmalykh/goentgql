package config

import (
	"dario.cat/mergo"
	"fmt"
	"github.com/99designs/gqlgen/codegen/config"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"path/filepath"
)

type GeneratorConfig struct {
	BasePath  string
	Package   string
	OutputDir string
	Header    string

	EntConfig     *EntConfig
	GraphQLConfig *GraphQLConfig
	ServiceConfig *ServiceConfig
}

func (g *GeneratorConfig) MarshalZerologObject(e *zerolog.Event) {
	e.Str(`BasePath`, g.BasePath).
		Str(`Package`, g.Package).
		Str(`OutputDir`, g.OutputDir).
		Interface(`EntConfig`, g.EntConfig).
		Interface(`GraphQLConfig`, g.GraphQLConfig).
		Interface(`ServiceConfig`, g.ServiceConfig)
}

type ConfiguratorGenerate struct {
	config *GeneratorConfig
}

func NewGenerator(conf *GeneratorConfig) (*ConfiguratorGenerate, error) {
	var gen = new(ConfiguratorGenerate)
	if conf.BasePath == `` || conf.Package == `` {
		return nil, fmt.Errorf(`path & package are required`)
	}

	var cfg = DefaultGeneratorConfig()

	// Merge default config with config
	if err := mergo.Merge(cfg, *conf, mergo.WithOverride); err != nil {
		return nil, fmt.Errorf(`merge engen configs error: %w`, err)
	}

	cfg.GraphQLConfig.AutoBind = append(cfg.GraphQLConfig.AutoBind,
		filepath.Join(cfg.Package, cfg.OutputDir, cfg.EntConfig.Target))
	cfg.EntConfig.ModuleName = filepath.Join(cfg.Package, cfg.OutputDir, cfg.EntConfig.ModuleName)

	// Make paths for generated files absolute
	cfg.EntConfig.SchemaPath = filepath.Join(cfg.BasePath, cfg.EntConfig.SchemaPath)
	cfg.EntConfig.Target = filepath.Join(cfg.BasePath, cfg.OutputDir, cfg.EntConfig.Target)

	cfg.EntConfig.GraphQLSchemaOutputDir = filepath.Join(cfg.BasePath, cfg.OutputDir, cfg.EntConfig.GraphQLSchemaOutputDir)
	cfg.GraphQLConfig.SchemaFilename = append(
		config.StringList{filepath.Join(cfg.EntConfig.GraphQLSchemaOutputDir, cfg.EntConfig.GraphQLSchemaOutputFilename)},
		cfg.GraphQLConfig.SchemaFilename...,
	)

	// Complete gqlconfig
	gqlconfig, err := GQLConfig(cfg.GraphQLConfig)
	if err != nil {
		return nil, fmt.Errorf(`GQLConfig error: %w`, err)
	}

	cfg.GraphQLConfig = gqlconfig

	// Service config
	cfg.EntConfig.Header = cfg.Header
	cfg.ServiceConfig.Header = cfg.Header
	cfg.ServiceConfig.EntModulePath = filepath.Join(cfg.Package, cfg.OutputDir, cfg.EntConfig.Target)
	cfg.ServiceConfig.GraphQLModulePath = filepath.Join(cfg.Package, cfg.OutputDir, cfg.GraphQLConfig.Resolver.Package)

	log.Info().Object(`config`, gen.config).Msg(`config loaded`)

	return gen, nil
}

func (c *ConfiguratorGenerate) EntConfig() *EntConfig {
	return c.config.EntConfig
}

func (c *ConfiguratorGenerate) GraphQLConfig() *GraphQLConfig {
	return c.config.GraphQLConfig
}

func DefaultGeneratorConfig() *GeneratorConfig {
	return &GeneratorConfig{
		EntConfig:     EntDefaultConfig(),
		GraphQLConfig: GQLGenDefaultConfig(),
		ServiceConfig: ServiceDefaultConfig(),
		Header:        `// Code generated by https://github.com/dmalykh/goentgql, DO NOT EDIT.`,
	}
}
