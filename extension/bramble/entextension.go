package bramble

import (
	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
)

var _ entc.Extension = (*entExtension)(nil)

type entExtension struct {
	entc.DefaultExtension
}

func (entExtension) Name() string {
	return `BrambleExtension`
}

func (s *entExtension) Hooks() []gen.Hook {
	return []gen.Hook{
		func(next gen.Generator) gen.Generator {
			return gen.GenerateFunc(func(g *gen.Graph) error {
				for _, node := range g.Nodes {
					if _, exist := node.Annotations[ConnectionAnnotationName]; !exist {
						continue
					}
					node.Fields = append(node.Fields, &gen.Field{
						Name: `ID`,
						Type: g.IDType,
					})
				}
				return next.Generate(g)
			})
		},
	}
}

//
//func (*entExtension) Templates() []*gen.Template {
//	return []*gen.Template{
//		gen.MustParse(gen.NewTemplate("greet").Parse(`// Code generated by ent. DO NOT EDIT.
//{{/* gotype: entgo.io/ent/entc/gen.Graph */}}
//
//{{ define "goentgql_bramble" }}
//
//{{/* Add the base header for the generated file */}}
//{{ $pkg := base $.Config.Package }}
//{{ template "header" $ }}
//
//{{/* Loop over all nodes and add the Greet method */}}
//{{ range $n := $.Nodes }}
//    {{ $receiver := $n.Receiver }}
//    func ({{ $receiver }} *{{ $n.Name }}) Greet() string {
//        return "Hello, {{ $n.Name }}"
//    }
//{{ end }}
//
//{{ end }}
//`)),
//	}
//}
